#ifndef REP_CFGALGORUNNER_SOURCE_H
#define REP_CFGALGORUNNER_SOURCE_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectsource.h>


class CfgAlgoRunnerSource : public QObject
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "CfgAlgoRunner")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "aeee93e5f725811b9a507b94b7be8a30f96a0e8d")
    Q_PROPERTY(QList<QPair<QChar, QStringList>> solution READ solution WRITE setSolution NOTIFY solutionChanged)

public:
    explicit CfgAlgoRunnerSource(QObject *parent = nullptr) : QObject(parent)
    {
        qRegisterMetaType<QVector<QPair<bool,QString>>>();
        qRegisterMetaTypeStreamOperators<QVector<QPair<bool,QString>>>();
        qRegisterMetaType<QList<QPair<QChar, QStringList>>>();
        qRegisterMetaTypeStreamOperators<QList<QPair<QChar, QStringList>>>();

    }

public:
    virtual ~CfgAlgoRunnerSource() {}

    virtual QList<QPair<QChar, QStringList>> solution() const = 0;
    virtual void setSolution(QList<QPair<QChar, QStringList>> solution) = 0;

Q_SIGNALS:
    void solutionChanged(QList<QPair<QChar, QStringList>> solution);

public Q_SLOTS:
    virtual void pushSolution(QList<QPair<QChar, QStringList>> solution)
    {
        setSolution(solution);
    }
    virtual void add_rule(QChar __repc_variable_1, QVector<QPair<bool,QString>> __repc_variable_2) = 0;
    virtual void find_shortest_words() = 0;
    virtual void clear() = 0;

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};

#if (QT_VERSION < QT_VERSION_CHECK(5, 5, 0))
#endif


class CfgAlgoRunnerSimpleSource : public CfgAlgoRunnerSource
{
    Q_OBJECT

public:
    explicit CfgAlgoRunnerSimpleSource(QObject *parent = nullptr) : CfgAlgoRunnerSource(parent)
    , m_solution({})
    {
    }

public:
    virtual ~CfgAlgoRunnerSimpleSource() {}

    QList<QPair<QChar, QStringList>> solution() const override { return m_solution; }
    virtual void setSolution(QList<QPair<QChar, QStringList>> solution) override
    {
        if (solution != m_solution) {
            m_solution = solution;
            Q_EMIT solutionChanged(m_solution);
        }
    }

private:
    QList<QPair<QChar, QStringList>> m_solution;
};


template <class ObjectType>
struct CfgAlgoRunnerSourceAPI : public SourceApiMap
{
    CfgAlgoRunnerSourceAPI(ObjectType *object, const QString &name = QStringLiteral("CfgAlgoRunner"))
        : SourceApiMap(), m_name(name)
    {
        Q_UNUSED(object);
        m_enums[0] = 0;
        m_properties[0] = 1;
        m_properties[1] = QtPrivate::qtro_property_index<ObjectType>(&ObjectType::solution, static_cast<QList<QPair<QChar, QStringList>> (QObject::*)()>(0),"solution");
        QtPrivate::qtro_method_test<ObjectType>(&ObjectType::solutionChanged, static_cast<void (QObject::*)()>(0));
        m_signals[0] = 1;
        m_signals[1] = QtPrivate::qtro_signal_index<ObjectType>(&ObjectType::solutionChanged, static_cast<void (QObject::*)(QList<QPair<QChar, QStringList>>)>(0),m_signalArgCount+0,&m_signalArgTypes[0]);
        m_methods[0] = 4;
        m_methods[1] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::pushSolution, static_cast<void (QObject::*)(QList<QPair<QChar, QStringList>>)>(0),"pushSolution(QList<QPair<QChar, QStringList>>)",m_methodArgCount+0,&m_methodArgTypes[0]);
        m_methods[2] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::add_rule, static_cast<void (QObject::*)(QChar,QVector<QPair<bool,QString> >)>(0),"add_rule(QChar,QVector<QPair<bool,QString> >)",m_methodArgCount+1,&m_methodArgTypes[1]);
        m_methods[3] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::find_shortest_words, static_cast<void (QObject::*)()>(0),"find_shortest_words()",m_methodArgCount+2,&m_methodArgTypes[2]);
        m_methods[4] = QtPrivate::qtro_method_index<ObjectType>(&ObjectType::clear, static_cast<void (QObject::*)()>(0),"clear()",m_methodArgCount+3,&m_methodArgTypes[3]);
    }

    QString name() const override { return m_name; }
    QString typeName() const override { return QStringLiteral("CfgAlgoRunner"); }
    int enumCount() const override { return m_enums[0]; }
    int propertyCount() const override { return m_properties[0]; }
    int signalCount() const override { return m_signals[0]; }
    int methodCount() const override { return m_methods[0]; }
    int sourceEnumIndex(int index) const override
    {
        if (index < 0 || index >= m_enums[0])
            return -1;
        return m_enums[index+1];
    }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= m_properties[0])
            return -1;
        return m_properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return -1;
        return m_signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= m_signals[0] || paramIndex < 0 || paramIndex >= m_signalArgCount[sigIndex])
            return -1;
        return m_signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return -1;
        return m_methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= m_methods[0] || paramIndex < 0 || paramIndex >= m_methodArgCount[methodIndex])
            return -1;
        return m_methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return m_properties[1];
        }
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        switch (index) {
        case 0: return 0;
        }
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("solutionChanged(QList<QPair<QChar, QStringList>>)");
        }
        return QByteArrayLiteral("");
    }
    QList<QByteArray> signalParameterNames(int index) const override
    {
        if (index < 0 || index >= m_signals[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_signals[index + 1]).parameterNames();
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("pushSolution(QList<QPair<QChar, QStringList>>)");
        case 1: return QByteArrayLiteral("add_rule(QChar,QVector<QPair<bool,QString> >)");
        case 2: return QByteArrayLiteral("find_shortest_words()");
        case 3: return QByteArrayLiteral("clear()");
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    QList<QByteArray> methodParameterNames(int index) const override
    {
        if (index < 0 || index >= m_methods[0])
            return QList<QByteArray>();
        return ObjectType::staticMetaObject.method(m_methods[index + 1]).parameterNames();
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
        case 0: return QByteArrayLiteral("void");
        case 1: return QByteArrayLiteral("void");
        case 2: return QByteArrayLiteral("void");
        case 3: return QByteArrayLiteral("void");
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"aeee93e5f725811b9a507b94b7be8a30f96a0e8d"}; }

    int m_enums[1];
    int m_properties[2];
    int m_signals[2];
    int m_methods[5];
    const QString m_name;
    int m_signalArgCount[1];
    const int* m_signalArgTypes[1];
    int m_methodArgCount[4];
    const int* m_methodArgTypes[4];
};

QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_CFGALGORUNNER_SOURCE_H
